
const Exam = require('../models/Exam');
const Question = require('../models/Question');

// üü¶ Contr√¥leur pour r√©cup√©rer les questions d‚Äôun examen sp√©cifique
exports.getExamQuestions = async (req, res) => {
    try {
        // R√©cup√©ration de l'ID de l'examen depuis les param√®tres de l'URL
        const examId = req.params.examId;

        // Recherche de l'examen dans la base de donn√©es avec le populate pour r√©cup√©rer les questions associ√©es
        const exam = await Exam.findById(examId).populate({
  path: 'questions',
  strictPopulate: false
});
        if (!exam) {
            // Si l'examen n'est pas trouv√© dans la base de donn√©es
            return res.status(404).json({ message: 'Examen non trouv√©' });
        }

        // R√©ponse avec le titre de l'examen et les questions associ√©es
        // On renvoie le titre de l'examen et les questions sous une forme plus simple
        res.status(200).json({
            examTitle: exam.title,  // Titre de l'examen
            questions: exam.questions.map(q => ({
                id: q._id,              // ID de la question
                text: q.text,           // Texte de la question
                type: q.type,           // Type de la question (par exemple QCM, r√©ponse directe, etc.)
                options: q.options,     // Options pour les questions de type QCM
                duration: q.duration,   // Dur√©e de la question (si applicable)
                note: q.note            // Note associ√©e √† la question
            }))
        });
    } catch (err) {
        // Si une erreur serveur se produit, on la g√®re ici
        res.status(500).json({ message: 'Erreur serveur', error: err.message });
    }
};

// üü© Contr√¥leur pour soumettre les r√©ponses et calculer le score
exports.submitExam = async (req, res) => {
    try {
        // R√©cup√©ration de l'ID de l'examen depuis les param√®tres de l'URL
        const examId = req.params.examId;
        // R√©cup√©ration des r√©ponses envoy√©es par l'√©tudiant
        const { answers } = req.body;

        // V√©rification de l'existence de l'examen dans la base de donn√©es
        const exam = await Exam.findById(examId);
        if (!exam) {
            // Si l'examen n'existe pas
            return res.status(404).json({ message: 'Examen non trouv√©' });
        }

        // R√©cup√©ration des questions associ√©es √† cet examen
        const questions = await Question.find({ examId });

        let totalScore = 0; // Score total obtenu par l'√©tudiant
        let maxScore = 0;   // Score total possible pour l'examen

        // Parcours des questions pour v√©rifier les r√©ponses de l'√©tudiant
        questions.forEach(q => {
            // R√©ponse donn√©e par l'√©tudiant pour chaque question
            const studentAnswer = answers[q._id];
            maxScore += q.note || 1; // On ajoute la note de la question √† la note maximale possible

            // Si la question est de type QCM
            if (q.type === 'QCM') {
                // Comparaison des r√©ponses tri√©es (QCM)
                const correct = JSON.stringify((q.correctAnswers || []).sort());  // R√©ponses correctes tri√©es
                const userAns = JSON.stringify((studentAnswer || []).sort());    // R√©ponses de l'√©tudiant tri√©es
                if (correct === userAns) {
                    totalScore += q.note || 1; // Si les r√©ponses sont correctes, on ajoute la note de la question
                }
            } else if (q.type === 'direct') {
                // Comparaison insensible √† la casse et aux espaces pour les r√©ponses directes
                if ((studentAnswer || '').trim().toLowerCase() === (q.correctAnswer || '').trim().toLowerCase()) {
                    totalScore += q.note || 1; // Si la r√©ponse est correcte, on ajoute la note de la question
                }
            }
        });

        // Calcul du score final en pourcentage
        const finalScore = (totalScore / maxScore) * 100;

        // Retour du score final sous forme de pourcentage avec 2 d√©cimales
        res.status(200).json({ score: finalScore.toFixed(2) });

    } catch (err) {
        // Gestion des erreurs serveur
        res.status(500).json({ message: 'Erreur serveur', error: err.message });
    }
};
